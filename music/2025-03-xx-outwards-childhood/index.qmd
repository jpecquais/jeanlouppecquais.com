---
title: Childhood
image: ow.jpg
author: "Outwards"
draft: true
categories: [Outwards]
---

---
title: "Advanced Audio Player with Howler.js"
format: 
  html:
    toc: true
    css: styles.css
    include-in-header:
      - text: |
          <script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.3/howler.min.js"></script>
          <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css">
---


```{=html}
<div class="enhanced-player">
  <div class="player-container">
    <!-- Album Art -->
    <div class="album-art">
      <img src="/api/placeholder/300/300" alt="Album Cover">
      <div class="track-info">
        <h3 id="track-title">Loading...</h3>
        <p id="track-artist">Please wait</p>
      </div>
    </div>
    
    <!-- Player Controls -->
    <div class="player-controls">
      <!-- Progress Bar -->
      <div class="progress-container">
        <div class="waveform" id="waveform"></div>
        <div class="progress-bar" id="progress-bar">
          <div class="progress" id="progress"></div>
        </div>
        <div class="time-info">
          <span id="current-time">0:00</span>
          <span id="total-time">0:00</span>
        </div>
      </div>
      
      <!-- Control Buttons -->
      <div class="controls">
        <button id="prev-btn" class="control-btn"><i class="fas fa-step-backward"></i></button>
        <button id="play-btn" class="control-btn play-pause"><i class="fas fa-play"></i></button>
        <button id="next-btn" class="control-btn"><i class="fas fa-step-forward"></i></button>
        <div class="volume-control">
          <i class="fas fa-volume-up" id="volume-icon"></i>
          <div class="volume-slider-container">
            <input type="range" id="volume-slider" min="0" max="100" value="70">
          </div>
        </div>
        <button id="repeat-btn" class="control-btn"><i class="fas fa-repeat"></i></button>
      </div>
    </div>
  </div>
  
  <!-- Playlist -->
  <div class="playlist-container">
    <h3>Playlist</h3>
    <ul id="playlist" class="playlist">
      <!-- Playlist items will be added here -->
    </ul>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Audio tracks data
  const tracks = [
    {
      title: "Binaural Forest Ambience",
      artist: "Nature Sounds",
      file: "audio/binaural-forest.mp3",
      howl: null
    },
    {
      title: "Urban Soundscape",
      artist: "City Recordings",
      file: "audio/urban-ambience.mp3",
      howl: null
    },
    {
      title: "Stereo Music Sample",
      artist: "Audio Demo",
      file: "audio/music-sample.mp3",
      howl: null
    }
  ];
  
  let currentTrack = 0;
  let isPlaying = false;
  let isRepeat = false;
  
  // Initialize playlist
  function initPlaylist() {
    const playlist = document.getElementById('playlist');
    playlist.innerHTML = '';
    
    tracks.forEach((track, index) => {
      const li = document.createElement('li');
      li.className = index === currentTrack ? 'active' : '';
      li.innerHTML = `
        <div class="track-info">
          <span class="track-title">${track.title}</span>
          <span class="track-artist">${track.artist}</span>
        </div>
        <span class="track-duration">--:--</span>
      `;
      
      li.addEventListener('click', function() {
        playTrack(index);
      });
      
      playlist.appendChild(li);
    });
  }
  
  // Play a track
  function playTrack(index) {
    // Update current track
    currentTrack = index;
    
    // Stop current track if playing
    if (isPlaying) {
      tracks[currentTrack].howl.stop();
    }
    
    // Update UI
    updateActiveTrack();
    document.getElementById('track-title').textContent = tracks[currentTrack].title;
    document.getElementById('track-artist').textContent = tracks[currentTrack].artist;
    
    // Create Howl instance if not created
    if (!tracks[currentTrack].howl) {
      tracks[currentTrack].howl = new Howl({
        src: [tracks[currentTrack].file],
        html5: true,
        volume: document.getElementById('volume-slider').value / 100,
        onplay: function() {
          isPlaying = true;
          document.getElementById('play-btn').innerHTML = '<i class="fas fa-pause"></i>';
          requestAnimationFrame(updateProgress);
        },
        onpause: function() {
          isPlaying = false;
          document.getElementById('play-btn').innerHTML = '<i class="fas fa-play"></i>';
        },
        onstop: function() {
          isPlaying = false;
          document.getElementById('play-btn').innerHTML = '<i class="fas fa-play"></i>';
          document.getElementById('progress').style.width = '0%';
          document.getElementById('current-time').textContent = '0:00';
        },
        onend: function() {
          if (isRepeat) {
            playTrack(currentTrack);
          } else if (currentTrack < tracks.length - 1) {
            playTrack(currentTrack + 1);
          } else {
            tracks[currentTrack].howl.stop();
          }
        },
        onload: function() {
          document.getElementById('total-time').textContent = formatTime(tracks[currentTrack].howl.duration());
          
          // Update playlist duration
          const durationElement = document.querySelectorAll('.playlist li')[currentTrack].querySelector('.track-duration');
          durationElement.textContent = formatTime(tracks[currentTrack].howl.duration());
          
          // Generate waveform (simplified visualization)
          generateWaveform();
        }
      });
    }
    
    // Play the track
    tracks[currentTrack].howl.play();
  }
  
  // Update active track in playlist
  function updateActiveTrack() {
    const playlistItems = document.querySelectorAll('.playlist li');
    playlistItems.forEach((item, index) => {
      if (index === currentTrack) {
        item.classList.add('active');
      } else {
        item.classList.remove('active');
      }
    });
  }
  
  // Update progress bar
  function updateProgress() {
    if (tracks[currentTrack].howl && tracks[currentTrack].howl.playing()) {
      const seek = tracks[currentTrack].howl.seek() || 0;
      document.getElementById('current-time').textContent = formatTime(seek);
      
      const progress = (seek / tracks[currentTrack].howl.duration()) * 100 || 0;
      document.getElementById('progress').style.width = progress + '%';
      
      requestAnimationFrame(updateProgress);
    }
  }
  
  // Format time in seconds to MM:SS
  function formatTime(secs) {
    const minutes = Math.floor(secs / 60) || 0;
    const seconds = Math.floor(secs - minutes * 60) || 0;
    return minutes + ':' + (seconds < 10 ? '0' : '') + seconds;
  }
  
  // Generate a simple waveform visualization
  function generateWaveform() {
    const waveformElement = document.getElementById('waveform');
    waveformElement.innerHTML = '';
    
    const bars = 50; // Number of bars in the waveform
    
    for (let i = 0; i < bars; i++) {
      const bar = document.createElement('div');
      bar.className = 'waveform-bar';
      
      // Generate random height for demo purposes
      // In a real app, you'd analyze the audio data
      const height = Math.floor(Math.random() * 100) + 20;
      bar.style.height = height + '%';
      
      waveformElement.appendChild(bar);
    }
  }
  
  // Event listeners
  document.getElementById('play-btn').addEventListener('click', function() {
    if (!tracks[currentTrack].howl) {
      playTrack(currentTrack);
    } else if (isPlaying) {
      tracks[currentTrack].howl.pause();
    } else {
      tracks[currentTrack].howl.play();
    }
  });
  
  document.getElementById('prev-btn').addEventListener('click', function() {
    if (currentTrack > 0) {
      playTrack(currentTrack - 1);
    }
  });
  
  document.getElementById('next-btn').addEventListener('click', function() {
    if (currentTrack < tracks.length - 1) {
      playTrack(currentTrack + 1);
    }
  });
  
  document.getElementById('volume-slider').addEventListener('input', function() {
    const volume = this.value / 100;
    
    // Update volume icon
    const volumeIcon = document.getElementById('volume-icon');
    if (volume === 0) {
      volumeIcon.className = 'fas fa-volume-mute';
    } else if (volume < 0.5) {
      volumeIcon.className = 'fas fa-volume-down';
    } else {
      volumeIcon.className = 'fas fa-volume-up';
    }
    
    // Set volume on current track
    if (tracks[currentTrack].howl) {
      tracks[currentTrack].howl.volume(volume);
    }
    
    // Set volume for all tracks
    tracks.forEach(track => {
      if (track.howl) {
        track.howl.volume(volume);
      }
    });
  });
  
  document.getElementById('repeat-btn').addEventListener('click', function() {
    isRepeat = !isRepeat;
    this.classList.toggle('active');
  });
  
  // Click on progress bar to seek
  document.getElementById('progress-bar').addEventListener('click', function(e) {
    if (tracks[currentTrack].howl) {
      const percent = e.offsetX / this.offsetWidth;
      tracks[currentTrack].howl.seek(percent * tracks[currentTrack].howl.duration());
    }
  });
  
  // Initialize
  initPlaylist();
  document.getElementById('track-title').textContent = tracks[0].title;
  document.getElementById('track-artist').textContent = tracks[0].artist;
});
</script>
```

{{< include ../_template.qmd >}}